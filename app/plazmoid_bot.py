from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
import asyncio
import logging
from threading import Thread
from .config import Config
from .app import VideoGeneratorApp
import uuid
import time
from typing import Dict, Optional, Set
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TaskStatus(Enum):
    PENDING = 'pending'
    COMPLETED = 'completed'
    ERROR = 'error'
    TIMEOUT = 'timeout'

@dataclass
class Task:
    status: TaskStatus
    start_time: float

def run_flask():
    app_instance = VideoGeneratorApp()
    app_instance.run()

class ImageBot:
    def __init__(self, token: str):
        try:
            if not token:
                raise ValueError("Bot token is not provided")
            self.application = ApplicationBuilder().token(token).build()
        except Exception as e:
            logger.critical(f"Failed to initialize bot: {e}")
            raise
    
        self.upload_folder = Config.UPLOAD_FOLDER
        self.base_webapp_url = Config.BASE_WEBAPP_URL
        self._ensure_upload_folder()
        
        self.user_states: Dict[int, str] = {}
        self.user_tasks: Dict[int, Dict[str, Task]] = {}
        self.monitoring_tasks: Set[int] = set()
        
        self._start_flask_server()

    def _ensure_upload_folder(self):
        os.makedirs(self.upload_folder, exist_ok=True)

    def _start_flask_server(self):
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()

    def _has_active_tasks(self, chat_id: int) -> bool:
        return chat_id in self.user_tasks and bool(self.user_tasks[chat_id])

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –ë–æ–∫–æ–≤—É—à–∫—É", callback_data='create_plasma')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data='my_tasks')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü–ª–∞–∑–º–æ–π–¥–ë–æ—Ç.\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥.",
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        handlers = {
            'create_plasma': self._handle_create_plasma,
            'my_tasks': self._handle_my_tasks,
            'help': self._handle_help
        }

        handler = handlers.get(query.data)
        if handler:
            await handler(query)

    async def _handle_create_plasma(self, query):
        self.user_states[query.from_user.id] = 'awaiting_image'
        await query.edit_message_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–∏.\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1280x720 –ø–∏–∫—Å–µ–ª–µ–π."
        )

    async def _handle_my_tasks(self, query):
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ø–∏—Å–∫–∞
        self.cleanup_old_tasks(query.message.chat_id)
        await self.show_user_tasks(query.message.chat_id)

    async def _handle_help(self, query):
        await query.edit_message_text(
            "üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ë–æ–∫–æ–≤—É—à–∫—É'\n"
            "2. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ\n"
            "4. –ü–æ–ª—É—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ\n\n"
            "‚ùóÔ∏è –°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1280x720\n"
            "‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ: 30-60 —Å–µ–∫—É–Ω–¥\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
        )

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id

        if self.user_states.get(user_id) == 'awaiting_image':
            try:
                task_id = str(uuid.uuid4())
                
                if chat_id not in self.user_tasks:
                    self.user_tasks[chat_id] = {}
                
                self.user_tasks[chat_id][task_id] = Task(
                    status=TaskStatus.PENDING,
                    start_time=time.time()
                )

                photo = update.message.photo[-1]
                file = await photo.get_file()
                file_path = os.path.join(self.upload_folder, f"{chat_id}_{task_id}_image.jpg")
                await file.download_to_drive(file_path)

                await self.create_monitoring_task(chat_id)

                keyboard = [[
                    InlineKeyboardButton(
                        "üé¨ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä",
                        web_app=WebAppInfo(url=f"{self.base_webapp_url}/cropper/{chat_id}/{task_id}")
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n"
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä\n"
                    "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å'\n\n"
                    "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ.",
                    reply_markup=reply_markup
                )

            except Exception as e:
                logger.error(f"Error handling image: {e}")
                if chat_id in self.user_tasks and task_id in self.user_tasks[chat_id]:
                    self.user_tasks[chat_id][task_id].status = TaskStatus.ERROR
                await update.message.reply_text(
                    "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ë–æ–∫–æ–≤—É—à–∫—É' –≤ –º–µ–Ω—é.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            )

    async def send_video_to_user(self, chat_id: int, video_path: str, task_id: str):
        task = self.user_tasks[chat_id].get(task_id)
        if task and task.status == TaskStatus.COMPLETED:
            logger.info(f"Video for task {task_id} already sent, skipping")
            return True

        try:
            file_size = os.path.getsize(video_path)
            MAX_VIDEO_SIZE = 50 * 1024 * 1024

            if file_size <= MAX_VIDEO_SIZE:
                try:
                    with open(video_path, 'rb') as video_file:
                        await self.application.bot.send_video(
                            chat_id=chat_id,
                            video=video_file,
                            caption="‚ú® –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üéâ",
                            filename=f"plasma_effect_{task_id[:8]}.mp4",
                            supports_streaming=True
                        )
                    logger.info(f"Sent as video message for task {task_id}")
                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    self.cleanup_old_tasks(chat_id)
                    return True
                except Exception as e:
                    logger.warning(f"Failed to send as video, trying as document: {e}")

            with open(video_path, 'rb') as video_file:
                await self.application.bot.send_document(
                    chat_id=chat_id,
                    document=video_file,
                    caption="‚ú® –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üéâ\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                    filename=f"plasma_effect_{task_id[:8]}.mp4"
                )
            logger.info(f"Sent as document for task {task_id}")
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.cleanup_old_tasks(chat_id)
            return True

        except Exception as e:
            logger.error(f"Error sending video/document: {e}")
            return False

    async def create_monitoring_task(self, chat_id: int):
        if chat_id not in self.monitoring_tasks:
            self.monitoring_tasks.add(chat_id)
            asyncio.create_task(self.monitor_user_tasks(chat_id))

    async def monitor_user_tasks(self, chat_id: int):
        try:
            logger.info(f"Starting monitor for chat_id: {chat_id}")
            
            while self._has_active_tasks(chat_id):
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                self.cleanup_old_tasks(chat_id)
                
                if chat_id not in self.user_tasks or not self.user_tasks[chat_id]:
                    logger.info(f"No tasks found for chat_id: {chat_id}")
                    break

                tasks_to_monitor = {
                    task_id: task 
                    for task_id, task in self.user_tasks[chat_id].items()
                    if task.status == TaskStatus.PENDING
                }

                if not tasks_to_monitor:
                    logger.info(f"No pending tasks for chat_id: {chat_id}")
                    break

                for task_id, task in tasks_to_monitor.items():
                    video_path = os.path.join(self.upload_folder, f"{chat_id}_{task_id}_video.mp4")
                    done_flag_path = os.path.join(self.upload_folder, f"{chat_id}_{task_id}_video_done.txt")

                    if os.path.exists(video_path) and os.path.exists(done_flag_path):
                        try:
                            if await self.send_video_to_user(chat_id, video_path, task_id):
                                task.status = TaskStatus.COMPLETED
                                logger.info(f"Video processed successfully for task {task_id}")
                            else:
                                task.status = TaskStatus.ERROR
                                await self.send_error_message(chat_id, task_id)
                        except Exception as e:
                            logger.error(f"Error processing task {task_id}: {e}")
                            task.status = TaskStatus.ERROR
                            await self.send_error_message(chat_id, task_id)
                        finally:
                            await self.cleanup_task_files(chat_id, task_id)
                    
                    elif time.time() - task.start_time > Config.MAX_WAIT_TIME:
                        logger.warning(f"Task {task_id} timed out")
                        task.status = TaskStatus.TIMEOUT
                        await self.send_timeout_message(chat_id, task_id)
                        await self.cleanup_task_files(chat_id, task_id)

                await asyncio.sleep(5)
        finally:
            self.monitoring_tasks.discard(chat_id)
            await self.cleanup_task_files(chat_id)

    def cleanup_old_tasks(self, chat_id: int, max_tasks: int = 10):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º –∏—Ö —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_tasks (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        if chat_id not in self.user_tasks:
            return

        tasks = self.user_tasks[chat_id]
        completed_tasks = {
            tid: task for tid, task in tasks.items()
            if task.status in [TaskStatus.COMPLETED, TaskStatus.TIMEOUT, TaskStatus.ERROR]
        }

        if len(completed_tasks) > max_tasks:
            sorted_tasks = sorted(
                completed_tasks.items(),
                key=lambda x: x[1].start_time
            )

            for task_id, _ in sorted_tasks[:-max_tasks]:
                del self.user_tasks[chat_id][task_id]
                asyncio.create_task(self.cleanup_task_files(chat_id, task_id))
                logger.debug(f"Removed old task {task_id} for chat {chat_id}")

    async def cleanup_task_files(self, chat_id: int, task_id: str):
        files_to_remove = [
            f"{chat_id}_{task_id}_video.mp4",
            f"{chat_id}_{task_id}_image.jpg",
            f"{chat_id}_{task_id}_video_done.txt"
        ]
        
        for filename in files_to_remove:
            file_path = os.path.join(self.upload_folder, filename)
            try:
                if os.path.exists(file_path):
                    await asyncio.sleep(0.5)
                    try:
                        os.remove(file_path)
                        logger.debug(f"Removed file: {filename}")
                    except PermissionError:
                        logger.warning(f"Permission denied while removing file: {filename}")
                        await asyncio.sleep(1)
                        os.remove(file_path)
            except FileNotFoundError:
                logger.debug(f"File not found (already removed): {filename}")
            except Exception as e:
                logger.error(f"Error removing file {filename}: {e}")

    async def show_user_tasks(self, chat_id: int):
        if not self._has_active_tasks(chat_id):
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
            )
            return

        tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for task_id, task in self.user_tasks[chat_id].items():
            status_emoji = {
                TaskStatus.PENDING: '‚è≥',
                TaskStatus.COMPLETED: '‚úÖ',
                TaskStatus.ERROR: '‚ùå',
                TaskStatus.TIMEOUT: '‚è∞'
            }.get(task.status, '‚ùì')
            tasks_text += f"{status_emoji} –ó–∞–¥–∞—á–∞ #{task_id[:8]}: {task.status.value}\n"

        

    async def send_error_message(self, chat_id: int, task_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ."
        if task_id:
            message += f"\n–ó–∞–¥–∞—á–∞ #{task_id[:8]}"
        await self.application.bot.send_message(chat_id=chat_id, text=message)

    async def send_timeout_message(self, chat_id: int, task_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ"""
        message = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ."
        if task_id:
            message += f"\n–ó–∞–¥–∞—á–∞ #{task_id[:8]}"
        await self.application.bot.send_message(chat_id=chat_id, text=message)

    async def debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        chat_id = update.message.chat_id
        debug_info = f"Chat ID: {chat_id}\n\n"
        
        if chat_id in self.user_tasks:
            debug_info += "Tasks:\n"
            for task_id, task in self.user_tasks[chat_id].items():
                video_path = os.path.join(self.upload_folder, f"{chat_id}_{task_id}_video.mp4")
                done_flag_path = os.path.join(self.upload_folder, f"{chat_id}_{task_id}_video_done.txt")
                
                debug_info += f"\nTask {task_id}:\n"
                debug_info += f"Status: {task.status.value}\n"
                debug_info += f"Video exists: {os.path.exists(video_path)}\n"
                debug_info += f"Done flag exists: {os.path.exists(done_flag_path)}\n"
        else:
            debug_info += "No tasks found"
            
        await update.message.reply_text(debug_info)

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("debug", self.debug),
            CallbackQueryHandler(self.button_callback),
            MessageHandler(filters.PHOTO, self.handle_image)
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.register_handlers()
        logger.info("Bot started successfully")
        self.application.run_polling()


if __name__ == '__main__':
    bot = ImageBot(Config.BOT_TOKEN)
    bot.run()
