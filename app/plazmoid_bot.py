# app/plazmoid_bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
import asyncio
import logging
from threading import Thread
from .config import Config
from .app import VideoGeneratorApp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_flask():
    app_instance = VideoGeneratorApp()
    app_instance.run()

class ImageBot:
    def __init__(self, token):
        self.application = ApplicationBuilder().token(token).build()
        self.upload_folder = Config.UPLOAD_FOLDER
        os.makedirs(self.upload_folder, exist_ok=True)
        self.user_states = {}
        self.register_handlers()
        self.BASE_WEBAPP_URL = Config.BASE_WEBAPP_URL
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()


    async def monitor_video_generation(self, chat_id: int, max_wait_time: int = Config.MAX_WAIT_TIME):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ–≥–¥–∞ –æ–Ω–æ –≥–æ—Ç–æ–≤–æ
        """
        video_path = os.path.join(self.upload_folder, f"{chat_id}_video.mp4")
        done_flag_path = os.path.join(self.upload_folder, f"{chat_id}_video_done.txt")
        
        start_time = asyncio.get_event_loop().time()
        
        while (asyncio.get_event_loop().time() - start_time) < max_wait_time:
            if os.path.exists(done_flag_path):
                try:
                    await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    
                    if os.path.exists(video_path) and os.path.getsize(video_path) > 0:
                        await self.send_video_to_user(chat_id, video_path)
                        self.cleanup_files(chat_id)
                        return True
                    
                except Exception as e:
                    logger.error(f"Error while sending video: {e}")
                    await self.send_error_message(chat_id)
                    return False
                
            await asyncio.sleep(1)
        
        await self.send_timeout_message(chat_id)
        return False

    async def send_video_to_user(self, chat_id: int, video_path: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await self.application.bot.send_video(
            chat_id=chat_id,
            video=open(video_path, 'rb'),
            caption="–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üéâ"
        )

    async def send_error_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        await self.application.bot.send_message(
            chat_id=chat_id,
            text="üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    async def send_timeout_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
        await self.application.bot.send_message(
            chat_id=chat_id,
            text="‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    def cleanup_files(self, chat_id: int):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        files_to_remove = [
            f"{chat_id}_video.mp4",
            f"{chat_id}_image.jpg",
            f"{chat_id}_video_done.txt"
        ]
        
        for filename in files_to_remove:
            file_path = os.path.join(self.upload_folder, filename)
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as e:
                    logger.error(f"Error removing file {filename}: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –ü–ª–∞–∑–º—É", callback_data='create_plasma')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == 'create_plasma':
            self.user_states[query.from_user.id] = 'awaiting_image'
            await query.edit_message_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é."
            )
        elif query.data == 'help':
            await query.edit_message_text(
                "üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ü–ª–∞–∑–º—É'\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∫–∞–¥—Ä—ã\n"
                "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
            )

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id

        if self.user_states.get(user_id) == 'awaiting_image':
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                photo = update.message.photo[-1]
                file = await photo.get_file()
                file_path = os.path.join(self.upload_folder, f"{chat_id}_image.jpg")
                await file.download_to_drive(file_path)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                keyboard = [[
                    InlineKeyboardButton(
                        "üé¨ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä",
                        web_app=WebAppInfo(url=f"{self.BASE_WEBAPP_URL}/cropper/{chat_id}")
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "üé® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é.\n"
                    "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≤–∏–¥–µ–æ.",
                    reply_markup=reply_markup
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
                asyncio.create_task(self.monitor_video_generation(chat_id))
                self.user_states[user_id] = None

            except Exception as e:
                logger.error(f"Error handling image: {e}")
                await update.message.reply_text(
                    "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ü–ª–∞–∑–º—É' –≤ –º–µ–Ω—é.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_image))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Bot started")
        self.application.run_polling()

if __name__ == '__main__':
    bot = ImageBot(Config.BOT_TOKEN)
    bot.run()